{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OneMessageBot Documentation \u00b6 About the Library \u00b6 This library provides a convenient framework for creating bots. Every bot created using this library operates in a \"single window and buttons\" mode. Essentially, the library is a bot message manager for Telegram that simplifies bot functionality to a single window and keyboard interface. Features: MongoDB (built-in support) SQLite (built-in support) JDBC support with Connection specification Creation of multi-page keyboards Multilingual support with the ability to provide custom translations Event handling in methods using ViewMessageImpl @ViewMessageListener annotation for registering event handlers Notification support Sending text messages Sending images with links, java.io.File , or byte[] Sending videos with links, java.io.File , or byte[] Sending audio with links, java.io.File , or byte[] Sending documents with links, java.io.File , or byte[] Updatable messages by time Sending Reply Keyboard Installation \u00b6 Maven: Maven: <dependency> <groupId>space.zoommax</groupId> <artifactId>OneMessageBot</artifactId> <version>2.1.4.8</version> </dependency> Gradle: implementation 'space.zoommax:OneMessageBot:2.1.4.8' Third-party Dependencies \u00b6 java-telegram-bot-api :: Repository: github.com/pengrad/java-telegram-bot-api :: Version: 7.0.1 MongoDBConnector :: Repository: github.com/zoommax/MongoDBConnector :: Version: 1.1 Lombok :: Official site: projectlombok.org :: Version: 1.18.30 SLF4J :: Official site: slf4j.org :: Version: 2.0.11 Reflections :: Repository: github.com/ronmamo/reflections :: Version: 0.10.2 Jackson Databind :: Repository: github.com/FasterXML/jackson-databind :: Version: 2.18.2 SQLite JDBC :: Repository: github.com/xerial/sqlite-jdbc :: Version: 3.47.2.0","title":"Home"},{"location":"#welcome-to-onemessagebot-documentation","text":"","title":"Welcome to OneMessageBot Documentation"},{"location":"#about-the-library","text":"This library provides a convenient framework for creating bots. Every bot created using this library operates in a \"single window and buttons\" mode. Essentially, the library is a bot message manager for Telegram that simplifies bot functionality to a single window and keyboard interface. Features: MongoDB (built-in support) SQLite (built-in support) JDBC support with Connection specification Creation of multi-page keyboards Multilingual support with the ability to provide custom translations Event handling in methods using ViewMessageImpl @ViewMessageListener annotation for registering event handlers Notification support Sending text messages Sending images with links, java.io.File , or byte[] Sending videos with links, java.io.File , or byte[] Sending audio with links, java.io.File , or byte[] Sending documents with links, java.io.File , or byte[] Updatable messages by time Sending Reply Keyboard","title":"About the Library"},{"location":"#installation","text":"Maven: Maven: <dependency> <groupId>space.zoommax</groupId> <artifactId>OneMessageBot</artifactId> <version>2.1.4.8</version> </dependency> Gradle: implementation 'space.zoommax:OneMessageBot:2.1.4.8'","title":"Installation"},{"location":"#third-party-dependencies","text":"java-telegram-bot-api :: Repository: github.com/pengrad/java-telegram-bot-api :: Version: 7.0.1 MongoDBConnector :: Repository: github.com/zoommax/MongoDBConnector :: Version: 1.1 Lombok :: Official site: projectlombok.org :: Version: 1.18.30 SLF4J :: Official site: slf4j.org :: Version: 2.0.11 Reflections :: Repository: github.com/ronmamo/reflections :: Version: 0.10.2 Jackson Databind :: Repository: github.com/FasterXML/jackson-databind :: Version: 2.18.2 SQLite JDBC :: Repository: github.com/xerial/sqlite-jdbc :: Version: 3.47.2.0","title":"Third-party Dependencies"},{"location":"quickstart/","text":"Quickstart \u00b6 Add a dependency to your project \u00b6 Maven: <dependency> <groupId>space.zoommax</groupId> <artifactId>OneMessageBot</artifactId> <version>2.1.4.8</version> </dependency> Gradle: implementation 'space.zoommax:OneMessageBot:2.1.4.8' Create a bot \u00b6 Configure bot settings \u00b6 package test.cl; import space.zoommax.BotSettings; import space.zoommax.utils.db.DbType; import java.io.IOException; public class Main { public static void main(String[] args) throws IOException { BotSettings botSettings = BotSettings.builder() .botToken(\"XXXX:yyyyyy\") .dbType(DbType.SQLITE) .buttonsRows(5) .dbName(\"TestBotApp\") .languageDirPath(\"translations\") .defaultLanguage(\"my_default_lang\") .dbConnection(null) .dbUrl(\"jdbc:sqlite:./\") .dbUser(\"\") .dbPassword(\"\") .build(); } } botToken - Bot token obtained from @BotFather. Required. dbType - Database type. Optional. Can be DbType.SQLITE , DbType.MONGODB , or DbType.CUSTOM . Default: DbType.SQLITE . buttonsRows - Number of button rows. Optional. Default: 4. dbName - Database name. Optional. Default: BotApp . languageDirPath - Path to the directory with translations. Optional. Default: empty string. defaultLanguage - Default language. Optional. Default: default_en_US . dbConnection - Database connection. Optional. Default: null . dbUrl - Database connection URL. Optional. Default: null . dbUser - Database connection username. Optional. Default: empty string. dbPassword - Database connection password. Optional. Default: empty string. disableGithubUrl - Details can be found in the LICENSE file. Run the bot \u00b6 package test.cl; import space.zoommax.BotApp; public class Main { public static void main(String[] args) { //BotSettings botSettings = BotSettings.builder() // ... // .build(); new Thread(new BotApp(botSettings)).start(); } } Create a \"window\" \u00b6 package test.cl; import com.pengrad.telegrambot.model.PhotoSize; import com.pengrad.telegrambot.model.Update; import space.zoommax.BotApp; import space.zoommax.utils.CreateNotification; import space.zoommax.utils.ViewMessageImpl; import space.zoommax.utils.ViewMessageListener; import space.zoommax.utils.db.NotificationType; import space.zoommax.utils.keyboard.Keyboard; import space.zoommax.view.TextMessage; import space.zoommax.view.ViewMessage; @ViewMessageListener public class Start implements ViewMessageImpl { @Override public ViewMessage onMessage(String message, int messageId, long chatId, String onMessageFlag, Update update) { if (onMessageFlag.equals(\"start\")) { return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello \" + message) .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onCommand(String command, int messageId, long chatId, Update update) { if (command.equals(\"/start\")) { if (chatId == 000000) { BotApp.setUserLanguage(String.valueOf(chatId), \"default_en_US\"); } return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello\") .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onPicture(PhotoSize[] photoSize, String caption, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onCallbackQuery(String data, int messageId, long chatId, Update update) { if (data.equals(\"strt\")) { CreateNotification createNotification = new CreateNotification(\"Hello callback notify\", String.valueOf(chatId), null, NotificationType.FULL, null); createNotification.run(); try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); } return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello callback\") .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onInlineQuery(String query, String queryId, long chatId, Update update) { return null; } @Override public ViewMessage onChosenInlineResult(String resultId, long queryId, String chatId, Update update) { return null; } }","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#add-a-dependency-to-your-project","text":"Maven: <dependency> <groupId>space.zoommax</groupId> <artifactId>OneMessageBot</artifactId> <version>2.1.4.8</version> </dependency> Gradle: implementation 'space.zoommax:OneMessageBot:2.1.4.8'","title":"Add a dependency to your project"},{"location":"quickstart/#create-a-bot","text":"","title":"Create a bot"},{"location":"quickstart/#configure-bot-settings","text":"package test.cl; import space.zoommax.BotSettings; import space.zoommax.utils.db.DbType; import java.io.IOException; public class Main { public static void main(String[] args) throws IOException { BotSettings botSettings = BotSettings.builder() .botToken(\"XXXX:yyyyyy\") .dbType(DbType.SQLITE) .buttonsRows(5) .dbName(\"TestBotApp\") .languageDirPath(\"translations\") .defaultLanguage(\"my_default_lang\") .dbConnection(null) .dbUrl(\"jdbc:sqlite:./\") .dbUser(\"\") .dbPassword(\"\") .build(); } } botToken - Bot token obtained from @BotFather. Required. dbType - Database type. Optional. Can be DbType.SQLITE , DbType.MONGODB , or DbType.CUSTOM . Default: DbType.SQLITE . buttonsRows - Number of button rows. Optional. Default: 4. dbName - Database name. Optional. Default: BotApp . languageDirPath - Path to the directory with translations. Optional. Default: empty string. defaultLanguage - Default language. Optional. Default: default_en_US . dbConnection - Database connection. Optional. Default: null . dbUrl - Database connection URL. Optional. Default: null . dbUser - Database connection username. Optional. Default: empty string. dbPassword - Database connection password. Optional. Default: empty string. disableGithubUrl - Details can be found in the LICENSE file.","title":"Configure bot settings"},{"location":"quickstart/#run-the-bot","text":"package test.cl; import space.zoommax.BotApp; public class Main { public static void main(String[] args) { //BotSettings botSettings = BotSettings.builder() // ... // .build(); new Thread(new BotApp(botSettings)).start(); } }","title":"Run the bot"},{"location":"quickstart/#create-a-window","text":"package test.cl; import com.pengrad.telegrambot.model.PhotoSize; import com.pengrad.telegrambot.model.Update; import space.zoommax.BotApp; import space.zoommax.utils.CreateNotification; import space.zoommax.utils.ViewMessageImpl; import space.zoommax.utils.ViewMessageListener; import space.zoommax.utils.db.NotificationType; import space.zoommax.utils.keyboard.Keyboard; import space.zoommax.view.TextMessage; import space.zoommax.view.ViewMessage; @ViewMessageListener public class Start implements ViewMessageImpl { @Override public ViewMessage onMessage(String message, int messageId, long chatId, String onMessageFlag, Update update) { if (onMessageFlag.equals(\"start\")) { return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello \" + message) .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\\n\" + \"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onCommand(String command, int messageId, long chatId, Update update) { if (command.equals(\"/start\")) { if (chatId == 000000) { BotApp.setUserLanguage(String.valueOf(chatId), \"default_en_US\"); } return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello\") .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onPicture(PhotoSize[] photoSize, String caption, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onCallbackQuery(String data, int messageId, long chatId, Update update) { if (data.equals(\"strt\")) { CreateNotification createNotification = new CreateNotification(\"Hello callback notify\", String.valueOf(chatId), null, NotificationType.FULL, null); createNotification.run(); try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); } return TextMessage.builder() .onMessageFlag(\"start\") .text(\"Hello callback\") .chatId(chatId) .keyboard(Keyboard.builder() .chatId(chatId) .code(\"{Google;https://google.com}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .build(); } return null; } @Override public ViewMessage onInlineQuery(String query, String queryId, long chatId, Update update) { return null; } @Override public ViewMessage onChosenInlineResult(String resultId, long queryId, String chatId, Update update) { return null; } }","title":"Create a \"window\""},{"location":"database/custom/","text":"Database CUSTOM \u00b6 You can use a relational database of your choice. To specify the database, configure the following settings in BotSettings : botSettings.setDbType(DbType.CUSTOM) botSettings.setDbUrl(\"url\") without the database name. Example: botSettings.setDbUrl(\"jdbc:postgresql://localhost:5432/\") botSettings.setDbUser(\"user\") botSettings.setDbPassword(\"password\") botSettings.setDbName(\"name\") botSettings.setDbConnection(connection) , where connection is a JDBC Connection to the database.","title":"Custom"},{"location":"database/custom/#database-custom","text":"You can use a relational database of your choice. To specify the database, configure the following settings in BotSettings : botSettings.setDbType(DbType.CUSTOM) botSettings.setDbUrl(\"url\") without the database name. Example: botSettings.setDbUrl(\"jdbc:postgresql://localhost:5432/\") botSettings.setDbUser(\"user\") botSettings.setDbPassword(\"password\") botSettings.setDbName(\"name\") botSettings.setDbConnection(connection) , where connection is a JDBC Connection to the database.","title":"Database CUSTOM"},{"location":"database/mongodb/","text":"Database MongoDB \u00b6 Built-in support for MongoDB. To configure MongoDB, set the appropriate settings in BotSettings : botSettings.setDbType(DbType.MONGODB) botSettings.setDbName(\"name\")","title":"MongoDB"},{"location":"database/mongodb/#database-mongodb","text":"Built-in support for MongoDB. To configure MongoDB, set the appropriate settings in BotSettings : botSettings.setDbType(DbType.MONGODB) botSettings.setDbName(\"name\")","title":"Database MongoDB"},{"location":"database/overview/","text":"Database Overview \u00b6 By default, OneMessageBot uses an SQLite database, but you can switch to MongoDB or any other relational database via JDBC by configuring the appropriate settings. To specify the database, set the following options in BotSettings : MongoDB: botSettings.setDbType(DbType.MONGODB) SQLite: botSettings.setDbType(DbType.SQLITE) Custom: botSettings.setDbType(DbType.CUSTOM) When using DbType.CUSTOM , the following must be specified: Database URL: botSettings.setDbUrl(url) without the database name User: botSettings.setDbUser(user) Password: botSettings.setDbPassword(password) Database name: botSettings.setDbName(name) JDBC Connection : botSettings.setDbConnection(connection) MongoDB documentation SQLite documentation Custom database documentation","title":"Overview"},{"location":"database/overview/#database-overview","text":"By default, OneMessageBot uses an SQLite database, but you can switch to MongoDB or any other relational database via JDBC by configuring the appropriate settings. To specify the database, set the following options in BotSettings : MongoDB: botSettings.setDbType(DbType.MONGODB) SQLite: botSettings.setDbType(DbType.SQLITE) Custom: botSettings.setDbType(DbType.CUSTOM) When using DbType.CUSTOM , the following must be specified: Database URL: botSettings.setDbUrl(url) without the database name User: botSettings.setDbUser(user) Password: botSettings.setDbPassword(password) Database name: botSettings.setDbName(name) JDBC Connection : botSettings.setDbConnection(connection) MongoDB documentation SQLite documentation Custom database documentation","title":"Database Overview"},{"location":"database/sqlite/","text":"Database SQLite \u00b6 Built-in support for SQLite. To configure SQLite, set the appropriate settings in BotSettings : botSettings.setDbType(DbType.SQLITE) botSettings.setDbName(\"name\") To specify the database path, set botSettings.setDbUrl(\"jdbc:sqlite:./path/to/\") . The database name will be automatically applied from botSettings.setDbName(\"name\") .","title":"SQLite"},{"location":"database/sqlite/#database-sqlite","text":"Built-in support for SQLite. To configure SQLite, set the appropriate settings in BotSettings : botSettings.setDbType(DbType.SQLITE) botSettings.setDbName(\"name\") To specify the database path, set botSettings.setDbUrl(\"jdbc:sqlite:./path/to/\") . The database name will be automatically applied from botSettings.setDbName(\"name\") .","title":"Database SQLite"},{"location":"keyboard/button/","text":"Button \u00b6 Implementation of a Button in the Application (Bot) Telegram buttons consist of the text displayed on the button and the action executed when the button is pressed. The library supports creating buttons with the following functionalities: - Callback actions - Links to external resources - Opening Telegram Mini Apps When creating buttons using strings, consider reserved characters: { } ; If needed, these characters can be escaped using the \\ character. Methods to Create a Button \u00b6 Formatted String \u00b6 To use this method, create a string in the format {text_on_button;button_action} . text_on_button - the text displayed on the button button_action - the action executed when the button is pressed If button_action starts with: mapp , the button will open a Telegram Mini App. http or tg , the button will open a link. In other cases, the button will perform a callback action. Examples: import space.zoommax.utils.keyboard.Button; Button button1 = new Button(\"{I will open a Telegram Mini App;mapphttp://example.com}\"); Button button2 = new Button(\"{I will open a link;http://example.com}\"); Button button3 = new Button(\"{I will also open a link;tg://username}\"); Button button4 = new Button(\"{I will perform a callback action;any_data}\"); Object \u00b6 To use this method, create an instance of the Button class with text and action fields. text - the text displayed on the button action - the action executed when the button is pressed If action starts with: mapp , the button will open a Telegram Mini App. http or tg , the button will open a link. In other cases, the button will perform a callback action. Examples: Button button1 = new Button(\"I will open a Telegram Mini App\", \"mapphttp://example.com\"); Button button2 = new Button(\"I will open a link\", \"http://example.com\"); Button button3 = new Button(\"I will also open a link\", \"tg://username\"); Button button4 = new Button(\"I will perform a callback action\", \"any_data\"); Object with Type Specification \u00b6 To use this method, create an instance of the Button class with text , action , and type fields. text - the text displayed on the button action - the action executed when the button is pressed type - the type of the button type can take the following values: CALLBACK - callback action LINK - link MINI_APP - Telegram Mini App Examples: Button button1 = new Button(\"I will open a Telegram Mini App\", \"http://example.com\", ButtonType.MINI_APP); Button button2 = new Button(\"I will open a link\", \"http://example.com\", ButtonType.LINK); Button button3 = new Button(\"I will also open a link\", \"tg://username\", ButtonType.LINK); Button button4 = new Button(\"I will perform a callback action\", \"any_data\", ButtonType.CALLBACK);","title":"Button"},{"location":"keyboard/button/#button","text":"Implementation of a Button in the Application (Bot) Telegram buttons consist of the text displayed on the button and the action executed when the button is pressed. The library supports creating buttons with the following functionalities: - Callback actions - Links to external resources - Opening Telegram Mini Apps When creating buttons using strings, consider reserved characters: { } ; If needed, these characters can be escaped using the \\ character.","title":"Button"},{"location":"keyboard/button/#methods-to-create-a-button","text":"","title":"Methods to Create a Button"},{"location":"keyboard/button/#formatted-string","text":"To use this method, create a string in the format {text_on_button;button_action} . text_on_button - the text displayed on the button button_action - the action executed when the button is pressed If button_action starts with: mapp , the button will open a Telegram Mini App. http or tg , the button will open a link. In other cases, the button will perform a callback action. Examples: import space.zoommax.utils.keyboard.Button; Button button1 = new Button(\"{I will open a Telegram Mini App;mapphttp://example.com}\"); Button button2 = new Button(\"{I will open a link;http://example.com}\"); Button button3 = new Button(\"{I will also open a link;tg://username}\"); Button button4 = new Button(\"{I will perform a callback action;any_data}\");","title":"Formatted String"},{"location":"keyboard/button/#object","text":"To use this method, create an instance of the Button class with text and action fields. text - the text displayed on the button action - the action executed when the button is pressed If action starts with: mapp , the button will open a Telegram Mini App. http or tg , the button will open a link. In other cases, the button will perform a callback action. Examples: Button button1 = new Button(\"I will open a Telegram Mini App\", \"mapphttp://example.com\"); Button button2 = new Button(\"I will open a link\", \"http://example.com\"); Button button3 = new Button(\"I will also open a link\", \"tg://username\"); Button button4 = new Button(\"I will perform a callback action\", \"any_data\");","title":"Object"},{"location":"keyboard/button/#object-with-type-specification","text":"To use this method, create an instance of the Button class with text , action , and type fields. text - the text displayed on the button action - the action executed when the button is pressed type - the type of the button type can take the following values: CALLBACK - callback action LINK - link MINI_APP - Telegram Mini App Examples: Button button1 = new Button(\"I will open a Telegram Mini App\", \"http://example.com\", ButtonType.MINI_APP); Button button2 = new Button(\"I will open a link\", \"http://example.com\", ButtonType.LINK); Button button3 = new Button(\"I will also open a link\", \"tg://username\", ButtonType.LINK); Button button4 = new Button(\"I will perform a callback action\", \"any_data\", ButtonType.CALLBACK);","title":"Object with Type Specification"},{"location":"keyboard/keyboard/","text":"Keyboard \u00b6 Implementation of a Keyboard in the Application (Bot) Keyboards in Telegram consist of an array of Button objects. You can create a keyboard using the builder class Keyboard . In the builder , you need to specify: chatId - the ID of the chat where the keyboard will be displayed and either: code - formatted keyboard code or: keyboardButtons - a list of keyboard buttons In a formatted string, the \\n separator is used to create a new row of buttons. Examples \u00b6 Setting the Keyboard via code \u00b6 Buttons will be arranged vertically. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}\\n{I will perform a callback action;any_data}\") .build(); Two buttons in one row and a third button below them. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}{I will perform a callback action;any_data}\\n{I will also open a link;tg://username}\") .build(); You can also add any characters outside of { and } to visually separate buttons in the code. All characters outside of { and } (except \\n ) will be ignored. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}{I will perform a callback action;any_data}\\n\" + \"_____>!@_________{I will also open a link;tg://username}______acfd_______\") .build(); Setting the Keyboard via keyboardButtons \u00b6 Buttons will be arranged vertically. import space.zoommax.utils.keyboard.Button; import space.zoommax.utils.keyboard.Keyboard; import java.util.List; import java.util.ArrayList; List<Button> buttons = new ArrayList<>(); buttons. add(new Button(\"I will open a link\", \"http://example.com\")); buttons. add(new Button(\"I will perform a callback action\", \"any_data\")); List<Button> buttons2 = new ArrayList<>(); buttons2. add(new Button(\"I will also open a link\", \"tg://username\")); List<List<Button>> keyboardButtons = new ArrayList<>(); keyboardButtons. add(buttons); keyboardButtons. add(buttons2); Keyboard keyboard = Keyboard.builder() .chatId(123456789) .keyboardButtons(keyboardButtons) .build(); Note \u00b6 If both code and keyboardButtons are set simultaneously, an exception will be thrown: IllegalArgumentException(\"Keyboard cannot have both code and buttons\")","title":"Keyboard"},{"location":"keyboard/keyboard/#keyboard","text":"Implementation of a Keyboard in the Application (Bot) Keyboards in Telegram consist of an array of Button objects. You can create a keyboard using the builder class Keyboard . In the builder , you need to specify: chatId - the ID of the chat where the keyboard will be displayed and either: code - formatted keyboard code or: keyboardButtons - a list of keyboard buttons In a formatted string, the \\n separator is used to create a new row of buttons.","title":"Keyboard"},{"location":"keyboard/keyboard/#examples","text":"","title":"Examples"},{"location":"keyboard/keyboard/#setting-the-keyboard-via-code","text":"Buttons will be arranged vertically. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}\\n{I will perform a callback action;any_data}\") .build(); Two buttons in one row and a third button below them. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}{I will perform a callback action;any_data}\\n{I will also open a link;tg://username}\") .build(); You can also add any characters outside of { and } to visually separate buttons in the code. All characters outside of { and } (except \\n ) will be ignored. import space.zoommax.utils.keyboard.Keyboard; Keyboard keyboard = Keyboard.builder() .chatId(123456789) .code(\"{I will open a link;http://example.com}{I will perform a callback action;any_data}\\n\" + \"_____>!@_________{I will also open a link;tg://username}______acfd_______\") .build();","title":"Setting the Keyboard via code"},{"location":"keyboard/keyboard/#setting-the-keyboard-via-keyboardbuttons","text":"Buttons will be arranged vertically. import space.zoommax.utils.keyboard.Button; import space.zoommax.utils.keyboard.Keyboard; import java.util.List; import java.util.ArrayList; List<Button> buttons = new ArrayList<>(); buttons. add(new Button(\"I will open a link\", \"http://example.com\")); buttons. add(new Button(\"I will perform a callback action\", \"any_data\")); List<Button> buttons2 = new ArrayList<>(); buttons2. add(new Button(\"I will also open a link\", \"tg://username\")); List<List<Button>> keyboardButtons = new ArrayList<>(); keyboardButtons. add(buttons); keyboardButtons. add(buttons2); Keyboard keyboard = Keyboard.builder() .chatId(123456789) .keyboardButtons(keyboardButtons) .build();","title":"Setting the Keyboard via keyboardButtons"},{"location":"keyboard/keyboard/#note","text":"If both code and keyboardButtons are set simultaneously, an exception will be thrown: IllegalArgumentException(\"Keyboard cannot have both code and buttons\")","title":"Note"},{"location":"localization/localization/","text":"Localization \u00b6 Built-in localization support. By default, English is used as the language. The library supports two localizations: default_en_US for English and default_ru_RU for Russian. To set the localization, configure the corresponding settings in BotSettings : botSettings.setDefaultLanguage(\"default_en_US\") - sets the default language. You can use default_en_US , default_ru_RU , or your custom localization. botSettings.setLanguageDirPath(\"/path/to/translations\") - sets the path to the directory with translations. default_en_US \u00b6 This is the localization template for the English language. When creating localizations, this template is used to modify the translation inside the library. { \"main\": { \"bot_starting\": \"Bot starting...\", \"notification\": \"You have unread notifications\", \"notify_close\": \"Close\" }, \"keyboard\": { \"next_button\": \"\u27a1\ufe0f\", \"prev_button\": \"\u2b05\ufe0f\" } } Localization Creation Rules \u00b6 All keys should be in lowercase, with words separated by underscores ( _ ). All values must be in string format. Use nesting. Files should be in json format and extension. Using Localization in Your Code \u00b6 Set the defaultLanguage and languageDirPath parameters in BotSettings . Start the bot. The language name will be the same as the name of the translation file. import space.zoommax.BotApp; import space.zoommax.utils.lang.LocalizationManager; LocalizationManager localizationManager = BotApp.localizationManager; String botStart = localizationManager.getTranslationForLanguage(UserLanguage.getUserLanguage(chatId), \"main.bot_starting\"); Access nested keys by passing a string, where the separator between keys is the period ( . ) character. The method UserLanguage.getUserLanguage(long chatId) returns the user's language name, which is saved in the database. The method UserLanguage.setUserLanguage(long chatId, String language) sets the user's language and saves it in the database. String language - the language name, which matches the translation file name in the translation directory. LocalizationManager can be used as the main translation manager in your project.","title":"Localization"},{"location":"localization/localization/#localization","text":"Built-in localization support. By default, English is used as the language. The library supports two localizations: default_en_US for English and default_ru_RU for Russian. To set the localization, configure the corresponding settings in BotSettings : botSettings.setDefaultLanguage(\"default_en_US\") - sets the default language. You can use default_en_US , default_ru_RU , or your custom localization. botSettings.setLanguageDirPath(\"/path/to/translations\") - sets the path to the directory with translations.","title":"Localization"},{"location":"localization/localization/#default_en_us","text":"This is the localization template for the English language. When creating localizations, this template is used to modify the translation inside the library. { \"main\": { \"bot_starting\": \"Bot starting...\", \"notification\": \"You have unread notifications\", \"notify_close\": \"Close\" }, \"keyboard\": { \"next_button\": \"\u27a1\ufe0f\", \"prev_button\": \"\u2b05\ufe0f\" } }","title":"default_en_US"},{"location":"localization/localization/#localization-creation-rules","text":"All keys should be in lowercase, with words separated by underscores ( _ ). All values must be in string format. Use nesting. Files should be in json format and extension.","title":"Localization Creation Rules"},{"location":"localization/localization/#using-localization-in-your-code","text":"Set the defaultLanguage and languageDirPath parameters in BotSettings . Start the bot. The language name will be the same as the name of the translation file. import space.zoommax.BotApp; import space.zoommax.utils.lang.LocalizationManager; LocalizationManager localizationManager = BotApp.localizationManager; String botStart = localizationManager.getTranslationForLanguage(UserLanguage.getUserLanguage(chatId), \"main.bot_starting\"); Access nested keys by passing a string, where the separator between keys is the period ( . ) character. The method UserLanguage.getUserLanguage(long chatId) returns the user's language name, which is saved in the database. The method UserLanguage.setUserLanguage(long chatId, String language) sets the user's language and saves it in the database. String language - the language name, which matches the translation file name in the translation directory. LocalizationManager can be used as the main translation manager in your project.","title":"Using Localization in Your Code"},{"location":"notifications/notification/","text":"Notifications \u00b6 The library supports sending notifications to chats. To create a notification, use the CreateNotification class: public class example { public static void main(String[] args) { CreateNotification createNotification = new CreateNotification( \"Hello notify\", // message String.valueOf(123456789), // tg_id null, // image NotificationType.FULL, // notificationType null // fileType ); createNotification.run(); } } As a result, a notification with the text Hello notify will be created and sent to the chat with ID 123456789 . Parameters: message - the text of the notification tg_id - the chat ID image - a String path to the image or video notificationType - the type of notification, either FULL or ALERT fileType - a String representing the file type, either image or video NotificationType defines the type of notification: FULL - full notification (appears immediately, with buttons for other unread notifications displayed under the message), ALERT - a message appears in the chat indicating there are unread notifications, with buttons for other unread notifications displayed under it. Clicking on the notification button opens a pop-up ALERT according to the Telegram Bot API documentation.","title":"Notification"},{"location":"notifications/notification/#notifications","text":"The library supports sending notifications to chats. To create a notification, use the CreateNotification class: public class example { public static void main(String[] args) { CreateNotification createNotification = new CreateNotification( \"Hello notify\", // message String.valueOf(123456789), // tg_id null, // image NotificationType.FULL, // notificationType null // fileType ); createNotification.run(); } } As a result, a notification with the text Hello notify will be created and sent to the chat with ID 123456789 . Parameters: message - the text of the notification tg_id - the chat ID image - a String path to the image or video notificationType - the type of notification, either FULL or ALERT fileType - a String representing the file type, either image or video NotificationType defines the type of notification: FULL - full notification (appears immediately, with buttons for other unread notifications displayed under the message), ALERT - a message appears in the chat indicating there are unread notifications, with buttons for other unread notifications displayed under it. Clicking on the notification button opens a pop-up ALERT according to the Telegram Bot API documentation.","title":"Notifications"},{"location":"viewmessage/audiomessage/","text":"AudioMessage \u00b6 The AudioMessage class builder is designed for sending audio files. Examples: import space.zoommax.view.AudioMessage; public class example { public static void main(String[] args) { AudioMessage audioMessage = AudioMessage.builder() .chatId(123456789) .audioAsUrl(\"https://example.com/audio.mp3\") /*optional .audioAsFile(new File(\"path/to/audio.mp3\")) .audioAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); audioMessage.run(); } } Parameters: chatId - the chat ID audioAsUrl - the URL of the audio file audioAsFile - the audio file audioAsBytes - the bytes of the audio file caption - the caption for the audio file keyboard - the keyboard Keyboard onMessageFlag - the flag used for message processing notify - indicates whether the message is a notification. Default is false . It can be returned as a ViewMessage or executed using the run() method.","title":"AudioMessage"},{"location":"viewmessage/audiomessage/#audiomessage","text":"The AudioMessage class builder is designed for sending audio files. Examples: import space.zoommax.view.AudioMessage; public class example { public static void main(String[] args) { AudioMessage audioMessage = AudioMessage.builder() .chatId(123456789) .audioAsUrl(\"https://example.com/audio.mp3\") /*optional .audioAsFile(new File(\"path/to/audio.mp3\")) .audioAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); audioMessage.run(); } } Parameters: chatId - the chat ID audioAsUrl - the URL of the audio file audioAsFile - the audio file audioAsBytes - the bytes of the audio file caption - the caption for the audio file keyboard - the keyboard Keyboard onMessageFlag - the flag used for message processing notify - indicates whether the message is a notification. Default is false . It can be returned as a ViewMessage or executed using the run() method.","title":"AudioMessage"},{"location":"viewmessage/documentmessage/","text":"DocumentMessage \u00b6 The DocumentMessage class builder is designed for sending documents. Examples: import space.zoommax.view.DocumentMessage; public class example { public static void main(String[] args) { DocumentMessage documentMessage = DocumentMessage.builder() .chatId(123456789) .documentAsUrl(\"https://example.com/document.pdf\") /*optional .documentAsFile(new File(\"path/to/document.pdf\")) .documentAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); documentMessage.run(); } } Parameters: documentAsUrl - URL of the document documentAsFile - document file documentAsBytes - byte array of the document chatId - chat ID caption - description of the document keyboard - the keyboard Keyboard onMessageFlag - flag used for message processing notify - indicates whether the message is a notification. Default is false . It can be returned as a ViewMessage or executed using the run() method.","title":"DocumentMessage"},{"location":"viewmessage/documentmessage/#documentmessage","text":"The DocumentMessage class builder is designed for sending documents. Examples: import space.zoommax.view.DocumentMessage; public class example { public static void main(String[] args) { DocumentMessage documentMessage = DocumentMessage.builder() .chatId(123456789) .documentAsUrl(\"https://example.com/document.pdf\") /*optional .documentAsFile(new File(\"path/to/document.pdf\")) .documentAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); documentMessage.run(); } } Parameters: documentAsUrl - URL of the document documentAsFile - document file documentAsBytes - byte array of the document chatId - chat ID caption - description of the document keyboard - the keyboard Keyboard onMessageFlag - flag used for message processing notify - indicates whether the message is a notification. Default is false . It can be returned as a ViewMessage or executed using the run() method.","title":"DocumentMessage"},{"location":"viewmessage/inlinekeyboard/","text":"InlineKeyboard \u00b6 The InlineKeyboard class builder is designed for sending buttons in the form of a keyboard. Examples: import space.zoommax.view.InlineKeyboard; public class example { public static void main(String[] args) { InlineKeyboard inlineKeyboard = InlineKeyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build(); inlineKeyboard.run(); } } Parameters: chatId - chat ID code - keyboard code It can be returned as a ViewMessage or executed using the run() method.","title":"InlineKeyboard"},{"location":"viewmessage/inlinekeyboard/#inlinekeyboard","text":"The InlineKeyboard class builder is designed for sending buttons in the form of a keyboard. Examples: import space.zoommax.view.InlineKeyboard; public class example { public static void main(String[] args) { InlineKeyboard inlineKeyboard = InlineKeyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build(); inlineKeyboard.run(); } } Parameters: chatId - chat ID code - keyboard code It can be returned as a ViewMessage or executed using the run() method.","title":"InlineKeyboard"},{"location":"viewmessage/listener/","text":"Listener \u00b6 To create an event handler, you need to create a class that implements the ViewMessageImpl interface, implement its methods, and add the @ViewMessageListener annotation to the class. The library performs a broadcast of events to the classes marked with the @ViewMessageListener annotation. For example: import space.zoommax.utils.ViewMessageListener; import space.zoommax.view.TextMessage; @ViewMessageListener public class Start implements ViewMessageImpl { @Override public ViewMessage onMessage(String message, int messageId, long chatId, String onMessageFlag, Update update) { return TextMessage.builder() .text(message) .chatId(chatId) .build(); } @Override public ViewMessage onCommand(String command, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onPicture(PhotoSize[] photoSize, String caption, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onCallbackQuery(String data, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onInlineQuery(String query, String queryId, long chatId, Update update) { return null; } @Override public ViewMessage onChosenInlineResult(String resultId, long queryId, String chatId, Update update) { return null; } } The above class implements an echo bot. The ViewMessage can be one of the following types: TextMessage - for sending text messages PhotoMessage - for sending photos DocumentMessage - for sending documents VideoMessage - for sending videos AudioMessage - for sending audio InlineKeyboard - for sending inline keyboard buttons The onMessage method handles text messages from the user and can be used for custom data input by the user. To process custom data in a specific handler, set the onMessageFlag when creating any type of message. It will be saved in the database and passed to the onMessage method as onMessageFlag when the event occurs. The onMessageFlag is automatically cleared when the event occurs but is passed as part of the event. The onCommand method handles commands from the user that start with / . The onPicture method handles images sent by the user. The onCallbackQuery method handles requests from keyboard buttons.","title":"Listener"},{"location":"viewmessage/listener/#listener","text":"To create an event handler, you need to create a class that implements the ViewMessageImpl interface, implement its methods, and add the @ViewMessageListener annotation to the class. The library performs a broadcast of events to the classes marked with the @ViewMessageListener annotation. For example: import space.zoommax.utils.ViewMessageListener; import space.zoommax.view.TextMessage; @ViewMessageListener public class Start implements ViewMessageImpl { @Override public ViewMessage onMessage(String message, int messageId, long chatId, String onMessageFlag, Update update) { return TextMessage.builder() .text(message) .chatId(chatId) .build(); } @Override public ViewMessage onCommand(String command, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onPicture(PhotoSize[] photoSize, String caption, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onCallbackQuery(String data, int messageId, long chatId, Update update) { return null; } @Override public ViewMessage onInlineQuery(String query, String queryId, long chatId, Update update) { return null; } @Override public ViewMessage onChosenInlineResult(String resultId, long queryId, String chatId, Update update) { return null; } } The above class implements an echo bot. The ViewMessage can be one of the following types: TextMessage - for sending text messages PhotoMessage - for sending photos DocumentMessage - for sending documents VideoMessage - for sending videos AudioMessage - for sending audio InlineKeyboard - for sending inline keyboard buttons The onMessage method handles text messages from the user and can be used for custom data input by the user. To process custom data in a specific handler, set the onMessageFlag when creating any type of message. It will be saved in the database and passed to the onMessage method as onMessageFlag when the event occurs. The onMessageFlag is automatically cleared when the event occurs but is passed as part of the event. The onCommand method handles commands from the user that start with / . The onPicture method handles images sent by the user. The onCallbackQuery method handles requests from keyboard buttons.","title":"Listener"},{"location":"viewmessage/photomessage/","text":"PhotoMessage \u00b6 Represents the builder class PhotoMessage , which is intended for sending images. import space.zoommax.view.PhotoMessage; public class example { public static void main(String[] args) { PhotoMessage photoMessage = PhotoMessage.builder() .chatId(123456789) .photoAsUrl(\"https://example.com/image.jpg\") /*optional .photoAsFile(new File(\"path/to/image.jpg\")) .photoAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); photoMessage.run(); } } Parameters: chatId - the chat identifier photoAsUrl - the URL of the image photoAsFile - the image file photoAsBytes - the bytes of the image keyboard - the keyboard in the Keyboard format caption - the description of the image onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"PhotoMessage"},{"location":"viewmessage/photomessage/#photomessage","text":"Represents the builder class PhotoMessage , which is intended for sending images. import space.zoommax.view.PhotoMessage; public class example { public static void main(String[] args) { PhotoMessage photoMessage = PhotoMessage.builder() .chatId(123456789) .photoAsUrl(\"https://example.com/image.jpg\") /*optional .photoAsFile(new File(\"path/to/image.jpg\")) .photoAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); photoMessage.run(); } } Parameters: chatId - the chat identifier photoAsUrl - the URL of the image photoAsFile - the image file photoAsBytes - the bytes of the image keyboard - the keyboard in the Keyboard format caption - the description of the image onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"PhotoMessage"},{"location":"viewmessage/textmessage/","text":"TextMessage \u00b6 Represents the builder class TextMessage , which is intended for sending text messages. import space.zoommax.view.TextMessage; public class example { public static void main(String[] args) { TextMessage textMessage = TextMessage.builder() .text(\"Hello\") .chatId(123456789) .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .onMessageFlag(\"start\") .notify(false) .build(); textMessage.run(); } } Parameters: text - the text of the message chatId - the chat identifier keyboard - the keyboard in Keyboard format onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"TextMessage"},{"location":"viewmessage/textmessage/#textmessage","text":"Represents the builder class TextMessage , which is intended for sending text messages. import space.zoommax.view.TextMessage; public class example { public static void main(String[] args) { TextMessage textMessage = TextMessage.builder() .text(\"Hello\") .chatId(123456789) .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .onMessageFlag(\"start\") .notify(false) .build(); textMessage.run(); } } Parameters: text - the text of the message chatId - the chat identifier keyboard - the keyboard in Keyboard format onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"TextMessage"},{"location":"viewmessage/updatemessage/","text":"Updating a Message by Time \u00b6 Messages can be updated at a specified time. To do this, create a ViewMessage that represents the message to which the original message will be replaced. ViewMessage viewMessage = TextMessage.builder() .text(\"Hello, world!\") .chatId(123456789) .build(); Then, create a message that will serve as the original for the update and either return it or call its run() method. import space.zoommax.view.TextMessage; class Example { public static void main(String[] args) { ViewMessage viewMessage = TextMessage.builder() .text(\"Hello\") .chatId(123456789) .viewMessageToUpdate(viewMessage.toString()) .needUpdate(true) .updateTime(System.currentTimeMillis() + 10000) .build(); viewMessage.run(); } } viewMessageToUpdate - the message that will replace the original one. Takes a serialized String from ViewMessage as input. needUpdate - a flag indicating whether an update is needed. updateTime - the update time in milliseconds. Note that if the original message has notify = true , the update will not occur. Also, the message will not be updated if the original message was modified before the update time.","title":"UpdateMessageWithTime"},{"location":"viewmessage/updatemessage/#updating-a-message-by-time","text":"Messages can be updated at a specified time. To do this, create a ViewMessage that represents the message to which the original message will be replaced. ViewMessage viewMessage = TextMessage.builder() .text(\"Hello, world!\") .chatId(123456789) .build(); Then, create a message that will serve as the original for the update and either return it or call its run() method. import space.zoommax.view.TextMessage; class Example { public static void main(String[] args) { ViewMessage viewMessage = TextMessage.builder() .text(\"Hello\") .chatId(123456789) .viewMessageToUpdate(viewMessage.toString()) .needUpdate(true) .updateTime(System.currentTimeMillis() + 10000) .build(); viewMessage.run(); } } viewMessageToUpdate - the message that will replace the original one. Takes a serialized String from ViewMessage as input. needUpdate - a flag indicating whether an update is needed. updateTime - the update time in milliseconds. Note that if the original message has notify = true , the update will not occur. Also, the message will not be updated if the original message was modified before the update time.","title":"Updating a Message by Time"},{"location":"viewmessage/videomessage/","text":"VideoMessage \u00b6 Represents the builder class VideoMessage , which is intended for sending videos. Examples: import space.zoommax.view.VideoMessage; public class example { public static void main(String[] args) { VideoMessage videoMessage = VideoMessage.builder() .chatId(123456789) .videoAsUrl(\"https://example.com/video.mp4\") /*optional .videoAsFile(new File(\"path/to/video.mp4\")) .videoAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); videoMessage.run(); } } Parameters: chatId - the chat identifier videoAsUrl - the URL of the video videoAsFile - the video file videoAsBytes - the byte array of the video caption - the caption text keyboard - the keyboard in Keyboard format onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"VideoMessage"},{"location":"viewmessage/videomessage/#videomessage","text":"Represents the builder class VideoMessage , which is intended for sending videos. Examples: import space.zoommax.view.VideoMessage; public class example { public static void main(String[] args) { VideoMessage videoMessage = VideoMessage.builder() .chatId(123456789) .videoAsUrl(\"https://example.com/video.mp4\") /*optional .videoAsFile(new File(\"path/to/video.mp4\")) .videoAsBytes(new byte[]{1,2,3,4,5}) */ .keyboard(Keyboard.builder() .chatId(123456789) .code(\"{Google;https://google.ru}{Yandex;https://ya.ru}\\n\" + \"{Start;strt}\") .build()) .caption(\"Hello\") .onMessageFlag(\"start\") .notify(false) .build(); videoMessage.run(); } } Parameters: chatId - the chat identifier videoAsUrl - the URL of the video videoAsFile - the video file videoAsBytes - the byte array of the video caption - the caption text keyboard - the keyboard in Keyboard format onMessageFlag - the flag used for processing messages notify - indicates whether the message is a notification. By default, it's false The message can be returned as a ViewMessage or run using the run() method.","title":"VideoMessage"}]}